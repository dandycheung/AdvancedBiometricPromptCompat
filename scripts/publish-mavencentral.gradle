task androidSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}

artifacts {
    archives androidSourcesJar
}

apply plugin: 'maven-publish'
apply plugin: 'signing'

group = PUBLISH_GROUP_ID
version = PUBLISH_VERSION

ext["signing.keyId"] = ''
ext["signing.password"] = ''
ext["signing.secretKeyRingFile"] = ''
ext["ossrhUsername"] = ''
ext["ossrhPassword"] = ''
ext["sonatypeStagingProfileId"] = ''
ext["ossrTokenUsername"] = ''
ext["ossrTokenPassword"] = ''

File secretPropsFile = project.rootProject.file('local.properties')
if (secretPropsFile.exists()) {
    println "Found secret props file, loading props"
    Properties p = new Properties()
    p.load(new FileInputStream(secretPropsFile))
    p.each { name, value ->
        ext[name] = value
    }
} else {
    println "No props file, loading env vars"
    ext["signing.keyId"] = System.getenv('SIGNING_KEY_ID')
    ext["signing.password"] = System.getenv('SIGNING_PASSWORD')
    ext["signing.secretKeyRingFile"] = System.getenv('SIGNING_SECRET_KEY_RING_FILE')
    ext["ossrhUsername"] = System.getenv('OSSRH_USERNAME')
    ext["ossrhPassword"] = System.getenv('OSSRH_PASSWORD')
    ext["ossrTokenUsername"] = System.getenv('OSSRTOKEN_USERNAME')
    ext["ossrTokenPassword"] = System.getenv('OSSRTOKEN_PASSWORD')
    ext["sonatypeStagingProfileId"] = System.getenv('SONATYPE_STAGING_PROFILE_ID')
}

nexusStaging {
    serverUrl = "https://s01.oss.sonatype.org/service/local/"
    packageGroup = PUBLISH_GROUP_ID
    stagingProfileId = sonatypeStagingProfileId
    username = ossrhUsername
    password = ossrhPassword
}

publishing {
    publications {
        release(MavenPublication) {
            groupId PUBLISH_GROUP_ID
            artifactId PUBLISH_ARTIFACT_ID
            version PUBLISH_VERSION
            artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
            artifact androidSourcesJar

            pom {
                name = PUBLISH_ARTIFACT_ID
                if(libArtifactId_biometric_custom_face_tf == artifactId) {
                    description = 'Custom Module for AdvancedBiometricPromptCompat library'
                } else if (libArtifactId_biometric_api == artifactId) {
                     description = 'The set of API\'s that allow to access some hidden features for AdvancedBiometricPromptCompat library'
                 } else if (libArtifactId_biometric == artifactId) {
                     description = 'This is an Android project allowing you to use the advanced biometric authorization features'
                 } else {
                     description = 'The set of helper tools for AdvancedBiometricPromptCompat library'
                 }
                url = 'https://github.com/Salat-Cx65/AdvancedBiometricPromptCompat'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'Salat-Cx65'
                        name = 'Sergey Komlach'
                        email = 's.komlach@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:github.com/Salat-Cx65/AdvancedBiometricPromptCompat.git'
                    developerConnection = 'scm:git:ssh://github.com/Salat-Cx65/AdvancedBiometricPromptCompat.git'
                    url = 'https://github.com/Salat-Cx65/AdvancedBiometricPromptCompat/tree/main'
                }
                withXml {
                    //Creating additional node for dependencies
                    def dependenciesNode = asNode().appendNode('dependencies')

//                    if (libArtifactId_biometric == artifactId) {
//                        def dependencyComponent = dependenciesNode.appendNode('dependency')
//                        dependencyComponent.appendNode('groupId', libsGroupId)
//                        dependencyComponent.appendNode('artifactId', libArtifactId_common)
//                        dependencyComponent.appendNode('version', version)
//                    }

                    //Defining configuration names from which dependencies will be taken (debugCompile or releaseCompile and compile)
                    def configurationNames = ["releaseImplementation", 'implementation']

                    configurationNames.each { configurationName ->
                        configurations[configurationName].allDependencies.each {
                            if (it.version != null && it.version != 'unspecified') {
                                def dependencyNode = dependenciesNode.appendNode('dependency')
                                dependencyNode.appendNode('groupId', it.group)
                                dependencyNode.appendNode('artifactId', it.name)
                                dependencyNode.appendNode('version', it.version)

                                //If there are any exclusions in dependency
                                if (it.excludeRules.size() > 0) {
                                    def exclusionsNode = dependencyNode.appendNode('exclusions')
                                    it.excludeRules.each { rule ->
                                        def exclusionNode = exclusionsNode.appendNode('exclusion')
                                        exclusionNode.appendNode('groupId', rule.group)
                                        exclusionNode.appendNode('artifactId', rule.module)
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    repositories {
        maven {
            name = "sonatype"

            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

            credentials {
                username ossrTokenUsername
                password ossrTokenPassword
            }
        }
    }
}

signing {
    sign publishing.publications
}
